# TODO: fix clean behaviour
# TOP directory points to the micropython directory
TOP := test-build/micropython

# Include the core environment definitions; this will set $(TOP).
include $(TOP)/py/mkenv.mk

# Include py core make definitions.
include $(TOP)/py/py.mk

# Source files
SRC_DIR := src/ports/bare-arm

# Set makefile-level MicroPython feature configurations.
MICROPY_ROM_TEXT_COMPRESSION ?= 0

# Define toolchain and other tools.
CROSS_COMPILE ?= aarch64-elf-
CC := $(CROSS_COMPILE)gcc
AS := $(CROSS_COMPILE)as
LD := $(CROSS_COMPILE)ld
OBJCOPY := $(CROSS_COMPILE)objcopy
SIZE := $(CROSS_COMPILE)size


# Set the architecture-specific flags
ARCH_FLAGS := -march=armv8-a
DFU ?= $(TOP)/tools/dfu.py
PYDFU ?= $(TOP)/tools/pydfu.py

# Set CFLAGS.
CFLAGS += -Isrc/include -I$(PREFIX)/aarch64-elf/include -I$(TOP)/ports/bare-arm -I$(TOP) -I$(BUILD)
CFLAGS += $(ARCH_FLAGS) -Wall -Werror -std=c99 -nostdlib
#CSUPEROPT = -Os

# Select debugging or optimization build.
ifeq ($(DEBUG), 1)
CFLAGS += -O0 -ffreestanding -mgeneral-regs-only
else
CFLAGS += -Os -DNDEBUG
CFLAGS += -fdata-sections -ffunction-sections
endif


# Set linker flags.
LDFLAGS += -nostdlib -T $(SRC_DIR)/linker-mpy.ld --gc-sections

ASFLAGS := $(ARCH_FLAGS)

# Define the required source files.
SRC_C += $(SRC_DIR)/lib.c $(SRC_DIR)/main.c $(SRC_DIR)/system.c

# Define assembly source files
SRC_ASM += $(SRC_DIR)/startup.S

# Define the required object files.
OBJ += $(PY_CORE_O)
OBJ += $(addprefix $(BUILD)/, $(SRC_C:.c=.o))
OBJ += $(SRC_ASM:.S=.o)


.PHONY: all clean

# Define the top-level target, the main firmware.
all: $(BUILD)/firmware.bin


$(BUILD)/%.o: %.S | $(BUILD)
	$(AS) $(ASFLAGS) $< -o $@

$(BUILD)/firmware.elf: $(OBJ)
	$(ECHO) "LINK $@"
	$(Q)$(LD) $(LDFLAGS) -o $@ $^
	$(Q)$(SIZE) $@
	$(Q)$(OBJCOPY) -O binary $(BUILD)/firmware.elf kernel.img


$(BUILD)/firmware.bin: $(BUILD)/firmware.elf
	$(ECHO) "Create $@"
	$(Q)$(OBJCOPY) -O binary -j .isr_vector -j .text -j .data $^ $@

$(BUILD)/firmware.dfu: $(BUILD)/firmware.bin
	$(ECHO) "Create $@"
	$(Q)$(PYTHON) $(DFU) -b 0x08000000:$^ $@

deploy: $(BUILD)/firmware.dfu
	$(Q)$(PYTHON) $(PYDFU) -u $^

debug: $(BUILD)/firmware.elf
	qemu-system-aarch64 -M virt -cpu cortex-a53 -kernel $< -S -s &
	aarch64-elf-gdb $< -ex "target remote localhost:1234"


# Include remaining core make rules.
include $(TOP)/py/mkrules.mk
